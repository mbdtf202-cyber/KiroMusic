/**
 * AIÂäüËÉΩÊµãËØïËÑöÊú¨
 * ÊµãËØïÊâÄÊúâAIÂäüËÉΩÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú
 */

require('dotenv').config();
const aiInitializer = require('./src/ai/initialize');
const investmentEngine = require('./src/ai/investmentEngine');
const audioFingerprint = require('./src/ai/audioFingerprint');
const recommendationEngine = require('./src/ai/recommendationEngine');
const mlModels = require('./src/ai/mlModels');

async function testAIFeatures() {
  console.log('üß™ Starting AI Features Test\n');

  try {
    // 1. ÂàùÂßãÂåñAIÊúçÂä°
    console.log('1Ô∏è‚É£  Testing AI Initialization...');
    await aiInitializer.initialize();
    console.log('‚úÖ AI services initialized\n');

    // 2. ÊµãËØïÊäïËµÑÊé®Ëçê
    console.log('2Ô∏è‚É£  Testing Investment Recommendation...');
    const recommendation = await investmentEngine.generateRecommendation({
      id: 'test-track-001',
      artist: 'Test Artist',
      genre: 'Electronic',
    });
    console.log('Investment Score:', recommendation.score);
    console.log('Risk Level:', recommendation.riskLevel);
    console.log('Predicted ROI:', recommendation.predictedROI);
    console.log('‚úÖ Investment recommendation working\n');

    // 3. ÊµãËØïÈü≥È¢ëÊåáÁ∫π
    console.log('3Ô∏è‚É£  Testing Audio Fingerprint...');
    const mockAudioBuffer = Buffer.alloc(1024);
    const fingerprint = await audioFingerprint.generateFingerprint(mockAudioBuffer);
    console.log('Fingerprint ID:', fingerprint.id);
    console.log('Hash:', fingerprint.hash.substring(0, 16) + '...');
    console.log('‚úÖ Audio fingerprint working\n');

    // 4. ÊµãËØïÊé®ËçêÁ≥ªÁªü
    console.log('4Ô∏è‚É£  Testing Recommendation Engine...');
    const recommendations = await recommendationEngine.getPersonalizedRecommendations(
      '0x1234567890123456789012345678901234567890',
      { limit: 5 }
    );
    console.log('Recommendations count:', recommendations.length);
    console.log('‚úÖ Recommendation engine working\n');

    // 5. ÊµãËØïMLÊ®°Âûã
    console.log('5Ô∏è‚É£  Testing ML Models...');
    
    // ÊµãËØïÁàÜÊ¨æÈ¢ÑÊµã
    const hitFeatures = Array(20).fill(0).map(() => Math.random());
    const hitProbability = await mlModels.predictHit(hitFeatures);
    console.log('Hit Probability:', (hitProbability * 100).toFixed(2) + '%');
    
    // ÊµãËØïÁ±ªÂûãÂàÜÁ±ª
    const audioFeatures = Array(128).fill(0).map(() => Math.random());
    const genreResult = await mlModels.classifyGenre(audioFeatures);
    console.log('Predicted Genre:', genreResult.genre);
    console.log('Confidence:', (genreResult.confidence * 100).toFixed(2) + '%');
    
    // ÊµãËØïÊÉÖÊÑüÂàÜÊûê
    const textFeatures = Array(50).fill(0).map(() => Math.random());
    const sentimentResult = await mlModels.analyzeSentiment(textFeatures);
    console.log('Sentiment:', sentimentResult.sentiment);
    console.log('Confidence:', (sentimentResult.confidence * 100).toFixed(2) + '%');
    
    console.log('‚úÖ ML models working\n');

    // 6. ÂÅ•Â∫∑Ê£ÄÊü•
    console.log('6Ô∏è‚É£  Testing Health Check...');
    const health = await aiInitializer.healthCheck();
    console.log('Overall Status:', health.status);
    console.log('Services:', Object.keys(health.services).length);
    console.log('‚úÖ Health check working\n');

    // 7. ÁªüËÆ°‰ø°ÊÅØ
    console.log('7Ô∏è‚É£  Testing Stats...');
    const stats = await aiInitializer.getStats();
    console.log('Initialized:', stats.initialized);
    console.log('Cache Size:', stats.cache.recommendations);
    console.log('‚úÖ Stats working\n');

    // 8. ÊµãËØïÁõ∏‰ººÈü≥‰πê
    console.log('8Ô∏è‚É£  Testing Similar Tracks...');
    const similarTracks = await recommendationEngine.getSimilarTracks('test-track-001', 5);
    console.log('Similar tracks count:', similarTracks.length);
    console.log('‚úÖ Similar tracks working\n');

    // ÊµãËØïÂÆåÊàê
    console.log('üéâ All AI Features Tests Passed!\n');

    // ÊâìÂç∞ÊúÄÁªàÁä∂ÊÄÅ
    aiInitializer.printStatus();

    // ‰øùÂ≠òÊ®°Âûã
    console.log('üíæ Saving models...');
    await aiInitializer.saveModels();
    console.log('‚úÖ Models saved\n');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// ËøêË°åÊµãËØï
if (require.main === module) {
  testAIFeatures()
    .then(() => {
      console.log('‚úÖ Test completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test failed:', error);
      process.exit(1);
    });
}

module.exports = testAIFeatures;
